#include <Wire.h>
#include <Adafruit_INA219.h>
#include "BluetoothSerial.h"

Adafruit_INA219 ina219;
BluetoothSerial SerialBT;

// Pines de control para los MOSFET
const int transistorMicroPin = 3;
const int transistorMiliPin = 4;

// Modos de operación
enum ModoOperacion { MICROS, MILIS, AUTO };
ModoOperacion modo = AUTO;

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32_Corriente"); // Nombre del dispositivo Bluetooth
  Wire.begin();

  ina219.begin();

  pinMode(transistorMicroPin, OUTPUT);
  pinMode(transistorMiliPin, OUTPUT);

  // Inicialmente apagamos ambos transistores
  digitalWrite(transistorMicroPin, LOW);
  digitalWrite(transistorMiliPin, LOW);
}

void loop() {
  float current_mA = ina219.getCurrent_mA(); // Lectura actual

  // Enviar corriente por Bluetooth
  SerialBT.print("Corriente: ");
  SerialBT.print(current_mA, 3);
  SerialBT.println(" mA");

  // Mostrar también por serial para depurar
  Serial.print("Corriente: ");
  Serial.print(current_mA, 3);
  Serial.println(" mA");

  // Recibir comandos desde App Inventor
  if (SerialBT.available()) {
    String comando = SerialBT.readStringUntil('\n');
    comando.trim();

    if (comando == "MICROS") modo = MICROS;
    else if (comando == "MILIS") modo = MILIS;
    else if (comando == "AUTO") modo = AUTO;

    Serial.print("Modo recibido: ");
    Serial.println(comando);
  }

  // Conmutar transistores según el modo
  switch (modo) {
    case MICROS:
      digitalWrite(transistorMicroPin, HIGH);
      digitalWrite(transistorMiliPin, LOW);
      break;
    case MILIS:
      digitalWrite(transistorMicroPin, LOW);
      digitalWrite(transistorMiliPin, HIGH);
      break;
    case AUTO:
      if (current_mA < 1.0) {
        digitalWrite(transistorMicroPin, HIGH);
        digitalWrite(transistorMiliPin, LOW);
      } else {
        digitalWrite(transistorMicroPin, LOW);
        digitalWrite(transistorMiliPin, HIGH);
      }
      break;
  }

  delay(1000); // Tiempo entre mediciones
}
